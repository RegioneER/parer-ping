/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.sacerasi.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Pig_Info_Dicom
 *
 */
public class PigInfoDicomTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Monday, 17 March 2014 15:12" )
     */

    public static final String SELECT = "Select * from Pig_Info_Dicom /**/";
    public static final String TABLE_NAME = "Pig_Info_Dicom";
    public static final String COL_ID_INFO_DICOM = "id_info_dicom";
    public static final String COL_ID_OBJECT = "id_object";
    public static final String COL_ID_VERS = "id_vers";
    public static final String COL_CD_VERSIONE_DATI_SPEC_DICOM = "cd_versione_dati_spec_dicom";
    public static final String COL_CD_AET_NODO_DICOM = "cd_aet_nodo_dicom";
    public static final String COL_DL_LISTA_SOP_CLASS = "dl_lista_sop_class";
    public static final String COL_DT_STUDY_DATE = "dt_study_date";
    public static final String COL_DS_ACCESSION_NUMBER = "ds_accession_number";
    public static final String COL_DL_LISTA_MODALITY_IN_STUDY = "dl_lista_modality_in_study";
    public static final String COL_DS_INSTITUTION_NAME = "ds_institution_name";
    public static final String COL_DS_REF_PHYSICIAN_NAME = "ds_ref_physician_name";
    public static final String COL_DL_STUDY_DESCRIPTION = "dl_study_description";
    public static final String COL_DS_PATIENT_NAME = "ds_patient_name";
    public static final String COL_CD_PATIENT_ID = "cd_patient_id";
    public static final String COL_CD_PATIENT_ID_ISSUER = "cd_patient_id_issuer";
    public static final String COL_DT_PATIENT_BIRTH_DATE = "dt_patient_birth_date";
    public static final String COL_TI_PATIENT_SEX = "ti_patient_sex";
    public static final String COL_DS_STUDY_INSTANCE_UID = "ds_study_instance_uid";
    public static final String COL_NI_STUDY_RELATED_SERIES = "ni_study_related_series";
    public static final String COL_NI_STUDY_RELATED_IMAGES = "ni_study_related_images";
    public static final String COL_DS_STUDY_ID = "ds_study_id";
    public static final String COL_DT_PRESA_IN_CARICO = "dt_presa_in_carico";
    public static final String COL_BL_DCM_HASH_TXT = "bl_dcm_hash_txt";
    public static final String COL_DS_DCM_HASH = "ds_dcm_hash";
    public static final String COL_TI_ALGO_DCM_HASH = "ti_algo_dcm_hash";
    public static final String COL_CD_ENCODING_DCM_HASH = "cd_encoding_dcm_hash";
    public static final String COL_BL_GLOBAL_HASH_TXT = "bl_global_hash_txt";
    public static final String COL_DS_GLOBAL_HASH = "ds_global_hash";
    public static final String COL_TI_ALGO_GLOBAL_HASH = "ti_algo_global_hash";
    public static final String COL_CD_ENCODING_GLOBAL_HASH = "cd_encoding_global_hash";
    public static final String COL_DS_FILE_HASH = "ds_file_hash";
    public static final String COL_TI_ALGO_FILE_HASH = "ti_algo_file_hash";
    public static final String COL_CD_ENCODING_FILE_HASH = "cd_encoding_file_hash";
    public static final String COL_ID_XSD_SPEC = "id_xsd_spec";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_INFO_DICOM, new ColumnDescriptor(COL_ID_INFO_DICOM, Types.DECIMAL, 22, true));
        map.put(COL_ID_OBJECT, new ColumnDescriptor(COL_ID_OBJECT, Types.DECIMAL, 22, false));
        map.put(COL_ID_VERS, new ColumnDescriptor(COL_ID_VERS, Types.DECIMAL, 22, false));
        map.put(COL_CD_VERSIONE_DATI_SPEC_DICOM,
                new ColumnDescriptor(COL_CD_VERSIONE_DATI_SPEC_DICOM, Types.VARCHAR, 100, false));
        map.put(COL_CD_AET_NODO_DICOM, new ColumnDescriptor(COL_CD_AET_NODO_DICOM, Types.VARCHAR, 100, false));
        map.put(COL_DL_LISTA_SOP_CLASS, new ColumnDescriptor(COL_DL_LISTA_SOP_CLASS, Types.VARCHAR, 2048, false));
        map.put(COL_DT_STUDY_DATE, new ColumnDescriptor(COL_DT_STUDY_DATE, Types.TIMESTAMP, 7, false));
        map.put(COL_DS_ACCESSION_NUMBER, new ColumnDescriptor(COL_DS_ACCESSION_NUMBER, Types.VARCHAR, 254, false));
        map.put(COL_DL_LISTA_MODALITY_IN_STUDY,
                new ColumnDescriptor(COL_DL_LISTA_MODALITY_IN_STUDY, Types.VARCHAR, 2048, false));
        map.put(COL_DS_INSTITUTION_NAME, new ColumnDescriptor(COL_DS_INSTITUTION_NAME, Types.VARCHAR, 254, false));
        map.put(COL_DS_REF_PHYSICIAN_NAME, new ColumnDescriptor(COL_DS_REF_PHYSICIAN_NAME, Types.VARCHAR, 254, false));
        map.put(COL_DL_STUDY_DESCRIPTION, new ColumnDescriptor(COL_DL_STUDY_DESCRIPTION, Types.VARCHAR, 1024, false));
        map.put(COL_DS_PATIENT_NAME, new ColumnDescriptor(COL_DS_PATIENT_NAME, Types.VARCHAR, 100, false));
        map.put(COL_CD_PATIENT_ID, new ColumnDescriptor(COL_CD_PATIENT_ID, Types.VARCHAR, 100, false));
        map.put(COL_CD_PATIENT_ID_ISSUER, new ColumnDescriptor(COL_CD_PATIENT_ID_ISSUER, Types.VARCHAR, 100, false));
        map.put(COL_DT_PATIENT_BIRTH_DATE, new ColumnDescriptor(COL_DT_PATIENT_BIRTH_DATE, Types.TIMESTAMP, 7, false));
        map.put(COL_TI_PATIENT_SEX, new ColumnDescriptor(COL_TI_PATIENT_SEX, Types.VARCHAR, 1, false));
        map.put(COL_DS_STUDY_INSTANCE_UID, new ColumnDescriptor(COL_DS_STUDY_INSTANCE_UID, Types.VARCHAR, 254, false));
        map.put(COL_NI_STUDY_RELATED_SERIES,
                new ColumnDescriptor(COL_NI_STUDY_RELATED_SERIES, Types.DECIMAL, 22, false));
        map.put(COL_NI_STUDY_RELATED_IMAGES,
                new ColumnDescriptor(COL_NI_STUDY_RELATED_IMAGES, Types.DECIMAL, 22, false));
        map.put(COL_DS_STUDY_ID, new ColumnDescriptor(COL_DS_STUDY_ID, Types.VARCHAR, 254, false));
        map.put(COL_DT_PRESA_IN_CARICO, new ColumnDescriptor(COL_DT_PRESA_IN_CARICO, Types.TIMESTAMP, 7, false));
        map.put(COL_BL_DCM_HASH_TXT, new ColumnDescriptor(COL_BL_DCM_HASH_TXT, Types.CLOB, 4000, false));
        map.put(COL_DS_DCM_HASH, new ColumnDescriptor(COL_DS_DCM_HASH, Types.VARCHAR, 254, false));
        map.put(COL_TI_ALGO_DCM_HASH, new ColumnDescriptor(COL_TI_ALGO_DCM_HASH, Types.VARCHAR, 20, false));
        map.put(COL_CD_ENCODING_DCM_HASH, new ColumnDescriptor(COL_CD_ENCODING_DCM_HASH, Types.VARCHAR, 100, false));
        map.put(COL_BL_GLOBAL_HASH_TXT, new ColumnDescriptor(COL_BL_GLOBAL_HASH_TXT, Types.CLOB, 4000, false));
        map.put(COL_DS_GLOBAL_HASH, new ColumnDescriptor(COL_DS_GLOBAL_HASH, Types.VARCHAR, 254, false));
        map.put(COL_TI_ALGO_GLOBAL_HASH, new ColumnDescriptor(COL_TI_ALGO_GLOBAL_HASH, Types.VARCHAR, 20, false));
        map.put(COL_CD_ENCODING_GLOBAL_HASH,
                new ColumnDescriptor(COL_CD_ENCODING_GLOBAL_HASH, Types.VARCHAR, 100, false));
        map.put(COL_DS_FILE_HASH, new ColumnDescriptor(COL_DS_FILE_HASH, Types.VARCHAR, 254, false));
        map.put(COL_TI_ALGO_FILE_HASH, new ColumnDescriptor(COL_TI_ALGO_FILE_HASH, Types.VARCHAR, 20, false));
        map.put(COL_CD_ENCODING_FILE_HASH, new ColumnDescriptor(COL_CD_ENCODING_FILE_HASH, Types.VARCHAR, 100, false));
        map.put(COL_ID_XSD_SPEC, new ColumnDescriptor(COL_ID_XSD_SPEC, Types.DECIMAL, 22, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
