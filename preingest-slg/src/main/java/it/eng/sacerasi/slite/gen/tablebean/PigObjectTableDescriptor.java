/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.sacerasi.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Pig_Object
 *
 */
public class PigObjectTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Wednesday, 3 May 2017 15:16" )
     */

    public static final String SELECT = "Select * from Pig_Object /**/";
    public static final String TABLE_NAME = "Pig_Object";
    public static final String COL_ID_OBJECT = "id_object";
    public static final String COL_ID_VERS = "id_vers";
    public static final String COL_CD_KEY_OBJECT = "cd_key_object";
    public static final String COL_ID_TIPO_OBJECT = "id_tipo_object";
    public static final String COL_ID_LAST_SESSIONE_INGEST = "id_last_sessione_ingest";
    public static final String COL_TI_STATO_OBJECT = "ti_stato_object";
    public static final String COL_FL_VERS_SACER_DA_RECUP = "fl_vers_sacer_da_recup";
    public static final String COL_MM_FIRST_SES = "mm_first_ses";
    public static final String COL_DS_OBJECT = "ds_object";
    public static final String COL_NI_UNITA_DOC_ATTESE = "ni_unita_doc_attese";
    public static final String COL_NI_TOT_OBJECT_TRASF = "ni_tot_object_trasf";
    public static final String COL_ID_OBJECT_PADRE = "id_object_padre";
    public static final String COL_PG_OGGETTO_TRASF = "pg_oggetto_trasf";
    public static final String COL_ID_USER_IAM = "id_user_iam";
    public static final String COL_CD_TRASF = "cd_trasf";
    public static final String COL_CD_VERSIONE_TRASF = "cd_versione_trasf";
    public static final String COL_CD_VERS_GEN = "cd_vers_gen";
    public static final String COL_FL_RICH_ANNUL_TIMEOUT = "fl_rich_annul_timeout";
    public static final String COL_TI_PRIORITA = "ti_priorita";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_OBJECT, new ColumnDescriptor(COL_ID_OBJECT, Types.DECIMAL, 22, true));
	map.put(COL_ID_VERS, new ColumnDescriptor(COL_ID_VERS, Types.DECIMAL, 22, false));
	map.put(COL_CD_KEY_OBJECT,
		new ColumnDescriptor(COL_CD_KEY_OBJECT, Types.VARCHAR, 100, false));
	map.put(COL_ID_TIPO_OBJECT,
		new ColumnDescriptor(COL_ID_TIPO_OBJECT, Types.DECIMAL, 22, false));
	map.put(COL_ID_LAST_SESSIONE_INGEST,
		new ColumnDescriptor(COL_ID_LAST_SESSIONE_INGEST, Types.DECIMAL, 22, false));
	map.put(COL_TI_STATO_OBJECT,
		new ColumnDescriptor(COL_TI_STATO_OBJECT, Types.VARCHAR, 30, false));
	map.put(COL_FL_VERS_SACER_DA_RECUP,
		new ColumnDescriptor(COL_FL_VERS_SACER_DA_RECUP, Types.VARCHAR, 1, false));
	map.put(COL_MM_FIRST_SES, new ColumnDescriptor(COL_MM_FIRST_SES, Types.DECIMAL, 22, false));
	map.put(COL_DS_OBJECT, new ColumnDescriptor(COL_DS_OBJECT, Types.VARCHAR, 1024, false));
	map.put(COL_NI_UNITA_DOC_ATTESE,
		new ColumnDescriptor(COL_NI_UNITA_DOC_ATTESE, Types.DECIMAL, 22, false));
	map.put(COL_NI_TOT_OBJECT_TRASF,
		new ColumnDescriptor(COL_NI_TOT_OBJECT_TRASF, Types.DECIMAL, 22, false));
	map.put(COL_ID_OBJECT_PADRE,
		new ColumnDescriptor(COL_ID_OBJECT_PADRE, Types.DECIMAL, 22, false));
	map.put(COL_PG_OGGETTO_TRASF,
		new ColumnDescriptor(COL_PG_OGGETTO_TRASF, Types.DECIMAL, 22, false));
	map.put(COL_ID_USER_IAM, new ColumnDescriptor(COL_ID_USER_IAM, Types.DECIMAL, 22, false));
	map.put(COL_CD_TRASF, new ColumnDescriptor(COL_CD_TRASF, Types.VARCHAR, 100, false));
	map.put(COL_TI_PRIORITA, new ColumnDescriptor(COL_TI_PRIORITA, Types.VARCHAR, 30, false));
	map.put(COL_CD_VERSIONE_TRASF,
		new ColumnDescriptor(COL_CD_VERSIONE_TRASF, Types.VARCHAR, 100, false));
	map.put(COL_CD_VERS_GEN, new ColumnDescriptor(COL_CD_VERS_GEN, Types.VARCHAR, 100, false));
	map.put(COL_FL_RICH_ANNUL_TIMEOUT,
		new ColumnDescriptor(COL_FL_RICH_ANNUL_TIMEOUT, Types.VARCHAR, 1, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
