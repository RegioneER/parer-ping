/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.sacerasi.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Pig_Tipo_Object
 *
 */
public class PigTipoObjectTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Wednesday, 24 May 2017 11:06" )
     */

    public static final String SELECT = "Select * from Pig_Tipo_Object /**/";
    public static final String TABLE_NAME = "Pig_Tipo_Object";
    public static final String COL_ID_TIPO_OBJECT = "id_tipo_object";
    public static final String COL_ID_VERS = "id_vers";
    public static final String COL_NM_TIPO_OBJECT = "nm_tipo_object";
    public static final String COL_DS_TIPO_OBJECT = "ds_tipo_object";
    public static final String COL_TI_VERS_FILE = "ti_vers_file";
    public static final String COL_TI_CALC_KEY_UNITA_DOC = "ti_calc_key_unita_doc";
    public static final String COL_FL_CONTR_HASH = "fl_contr_hash";
    public static final String COL_CD_REGISTRO_UNITA_DOC_SACER = "cd_registro_unita_doc_sacer";
    public static final String COL_NM_TIPO_UNITA_DOC_SACER = "nm_tipo_unita_doc_sacer";
    public static final String COL_FL_FORZA_ACCETTAZIONE_SACER = "fl_forza_accettazione_sacer";
    public static final String COL_FL_FORZA_CONSERVAZIONE = "fl_forza_conservazione";
    public static final String COL_FL_FORZA_COLLEGAMENTO = "fl_forza_collegamento";
    public static final String COL_TI_CONSERVAZIONE = "ti_conservazione";
    public static final String COL_ID_TRASF = "id_trasf";
    public static final String COL_TI_PRIORITA = "ti_priorita";
    public static final String COL_DS_REG_EXP_CD_VERS = "ds_reg_exp_cd_vers";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
	map.put(COL_ID_TIPO_OBJECT,
		new ColumnDescriptor(COL_ID_TIPO_OBJECT, Types.DECIMAL, 22, true));
	map.put(COL_ID_VERS, new ColumnDescriptor(COL_ID_VERS, Types.DECIMAL, 22, false));
	map.put(COL_NM_TIPO_OBJECT,
		new ColumnDescriptor(COL_NM_TIPO_OBJECT, Types.VARCHAR, 100, false));
	map.put(COL_DS_TIPO_OBJECT,
		new ColumnDescriptor(COL_DS_TIPO_OBJECT, Types.VARCHAR, 254, false));
	map.put(COL_TI_VERS_FILE, new ColumnDescriptor(COL_TI_VERS_FILE, Types.VARCHAR, 20, false));
	map.put(COL_TI_CALC_KEY_UNITA_DOC,
		new ColumnDescriptor(COL_TI_CALC_KEY_UNITA_DOC, Types.VARCHAR, 20, false));
	map.put(COL_FL_CONTR_HASH,
		new ColumnDescriptor(COL_FL_CONTR_HASH, Types.VARCHAR, 1, false));
	map.put(COL_CD_REGISTRO_UNITA_DOC_SACER,
		new ColumnDescriptor(COL_CD_REGISTRO_UNITA_DOC_SACER, Types.VARCHAR, 100, false));
	map.put(COL_NM_TIPO_UNITA_DOC_SACER,
		new ColumnDescriptor(COL_NM_TIPO_UNITA_DOC_SACER, Types.VARCHAR, 100, false));
	map.put(COL_FL_FORZA_ACCETTAZIONE_SACER,
		new ColumnDescriptor(COL_FL_FORZA_ACCETTAZIONE_SACER, Types.VARCHAR, 1, false));
	map.put(COL_FL_FORZA_CONSERVAZIONE,
		new ColumnDescriptor(COL_FL_FORZA_CONSERVAZIONE, Types.VARCHAR, 1, false));
	map.put(COL_FL_FORZA_COLLEGAMENTO,
		new ColumnDescriptor(COL_FL_FORZA_COLLEGAMENTO, Types.VARCHAR, 1, false));
	map.put(COL_TI_CONSERVAZIONE,
		new ColumnDescriptor(COL_TI_CONSERVAZIONE, Types.VARCHAR, 30, false));
	map.put(COL_ID_TRASF, new ColumnDescriptor(COL_ID_TRASF, Types.DECIMAL, 22, false));
	map.put(COL_TI_PRIORITA, new ColumnDescriptor(COL_TI_PRIORITA, Types.VARCHAR, 30, false));
	map.put(COL_DS_REG_EXP_CD_VERS,
		new ColumnDescriptor(COL_DS_REG_EXP_CD_VERS, Types.VARCHAR, 254, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
	return map;
    }

    public String getTableName() {
	return TABLE_NAME;
    }

    public String getStatement() {
	return SELECT;
    }

}
