/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */

package it.eng.sacerasi.slite.gen.tablebean;

import java.sql.Types;
import java.util.LinkedHashMap;
import java.util.Map;

import it.eng.spagoLite.db.oracle.bean.column.ColumnDescriptor;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * @author Sloth
 *
 *         Bean per la tabella Pig_Vers
 *
 */
public class PigVersTableDescriptor extends TableDescriptor {

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter", comments =
     * "This class was generated by OraTool", date = "Tuesday, 30 April 2019 11:01" )
     */
    public static final String SELECT = "Select * from Pig_Vers /**/";
    public static final String TABLE_NAME = "Pig_Vers";
    public static final String COL_ID_VERS = "id_vers";
    public static final String COL_ID_AMBIENTE_VERS = "id_ambiente_vers";
    public static final String COL_NM_VERS = "nm_vers";
    public static final String COL_DS_VERS = "ds_vers";
    public static final String COL_DS_PATH_INPUT_FTP = "ds_path_input_ftp";
    public static final String COL_DS_PATH_OUTPUT_FTP = "ds_path_output_ftp";
    public static final String COL_DS_PATH_TRASF = "ds_path_trasf";
    public static final String COL_DS_PATH_DA_VERSARE = "ds_path_da_versare";
    public static final String COL_DT_INI_VAL_APPART_AMBIENTE = "dt_ini_val_appart_ambiente";
    public static final String COL_DT_FIN_VAL_APPART_AMBIENTE = "dt_fin_val_appart_ambiente";
    public static final String COL_ID_ENTE_CONVENZ = "id_ente_convenz";
    public static final String COL_ID_ENTE_FORNIT_ESTERN = "id_ente_fornit_estern";
    public static final String COL_DT_INI_VAL_APPART_ENTE_SIAM = "dt_ini_val_appart_ente_siam";
    public static final String COL_DT_FINE_VAL_APPART_ENTE_SIAM = "dt_fine_val_appart_ente_siam";
    public static final String COL_DT_INI_VAL_VERS = "dt_ini_val_vers";
    public static final String COL_DT_FINE_VAL_VERS = "dt_fine_val_vers";
    public static final String COL_FL_CESSATO = "fl_cessato";
    public static final String COL_FL_ARCHIVIO_RESTITUITO = "fl_archivio_restituito";

    private static Map<String, ColumnDescriptor> map = new LinkedHashMap<String, ColumnDescriptor>();

    static {
        map.put(COL_ID_VERS, new ColumnDescriptor(COL_ID_VERS, Types.DECIMAL, 22, true));
        map.put(COL_ID_AMBIENTE_VERS, new ColumnDescriptor(COL_ID_AMBIENTE_VERS, Types.DECIMAL, 22, false));
        map.put(COL_NM_VERS, new ColumnDescriptor(COL_NM_VERS, Types.VARCHAR, 100, false));
        map.put(COL_DS_VERS, new ColumnDescriptor(COL_DS_VERS, Types.VARCHAR, 254, false));
        map.put(COL_DS_PATH_INPUT_FTP, new ColumnDescriptor(COL_DS_PATH_INPUT_FTP, Types.VARCHAR, 254, false));
        map.put(COL_DS_PATH_OUTPUT_FTP, new ColumnDescriptor(COL_DS_PATH_OUTPUT_FTP, Types.VARCHAR, 254, false));
        map.put(COL_DS_PATH_TRASF, new ColumnDescriptor(COL_DS_PATH_TRASF, Types.VARCHAR, 254, false));
        map.put(COL_DS_PATH_DA_VERSARE, new ColumnDescriptor(COL_DS_PATH_DA_VERSARE, Types.VARCHAR, 254, false));
        map.put(COL_DT_INI_VAL_APPART_AMBIENTE,
                new ColumnDescriptor(COL_DT_INI_VAL_APPART_AMBIENTE, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FIN_VAL_APPART_AMBIENTE,
                new ColumnDescriptor(COL_DT_FIN_VAL_APPART_AMBIENTE, Types.TIMESTAMP, 7, false));
        map.put(COL_ID_ENTE_CONVENZ, new ColumnDescriptor(COL_ID_ENTE_CONVENZ, Types.DECIMAL, 22, false));
        map.put(COL_ID_ENTE_FORNIT_ESTERN, new ColumnDescriptor(COL_ID_ENTE_FORNIT_ESTERN, Types.DECIMAL, 22, false));
        map.put(COL_DT_INI_VAL_APPART_ENTE_SIAM,
                new ColumnDescriptor(COL_DT_INI_VAL_APPART_ENTE_SIAM, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FINE_VAL_APPART_ENTE_SIAM,
                new ColumnDescriptor(COL_DT_FINE_VAL_APPART_ENTE_SIAM, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_INI_VAL_VERS, new ColumnDescriptor(COL_DT_INI_VAL_VERS, Types.TIMESTAMP, 7, false));
        map.put(COL_DT_FINE_VAL_VERS, new ColumnDescriptor(COL_DT_FINE_VAL_VERS, Types.TIMESTAMP, 7, false));
        map.put(COL_FL_CESSATO, new ColumnDescriptor(COL_FL_CESSATO, Types.VARCHAR, 1, false));
        map.put(COL_FL_ARCHIVIO_RESTITUITO, new ColumnDescriptor(COL_FL_ARCHIVIO_RESTITUITO, Types.VARCHAR, 1, false));
    }

    public Map<String, ColumnDescriptor> getColumnMap() {
        return map;
    }

    public String getTableName() {
        return TABLE_NAME;
    }

    public String getStatement() {
        return SELECT;
    }

}
