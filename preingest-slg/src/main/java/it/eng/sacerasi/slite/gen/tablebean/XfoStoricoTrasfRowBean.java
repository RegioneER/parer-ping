/*
 * Engineering Ingegneria Informatica S.p.A.
 *
 * Copyright (C) 2023 Regione Emilia-Romagna <p/> This program is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version. <p/> This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. <p/> You should
 * have received a copy of the GNU Affero General Public License along with this program. If not,
 * see <https://www.gnu.org/licenses/>.
 */

package it.eng.sacerasi.slite.gen.tablebean;

import java.math.BigDecimal;
import java.sql.Timestamp;

import it.eng.sacerasi.entity.XfoStoricoTrasf;
import it.eng.sacerasi.entity.XfoTrasf;
import it.eng.spagoLite.db.base.JEEBaseRowInterface;
import it.eng.spagoLite.db.base.row.BaseRow;
import it.eng.spagoLite.db.oracle.bean.column.TableDescriptor;

/**
 * RowBean per la tabella Xfo_Storico_Trasf
 *
 */
public class XfoStoricoTrasfRowBean extends BaseRow implements JEEBaseRowInterface {

    private static final long serialVersionUID = 1L;

    /*
     * @Generated( value = "it.eg.dbtool.db.oracle.beangen.Oracle4JPAClientBeanGen$TableBeanWriter",
     * comments = "This class was generated by OraTool", date = "Wednesday, 23 January 2019 17:11" )
     */

    public static XfoStoricoTrasfTableDescriptor TABLE_DESCRIPTOR = new XfoStoricoTrasfTableDescriptor();

    public XfoStoricoTrasfRowBean() {
	super();
    }

    public TableDescriptor getTableDescriptor() {
	return TABLE_DESCRIPTOR;
    }

    // getter e setter
    public BigDecimal getIdStoricoTrasf() {
	return getBigDecimal("id_storico_trasf");
    }

    public void setIdStoricoTrasf(BigDecimal idStoricoTrasf) {
	setObject("id_storico_trasf", idStoricoTrasf);
    }

    public BigDecimal getIdTrasf() {
	return getBigDecimal("id_trasf");
    }

    public void setIdTrasf(BigDecimal idTrasf) {
	setObject("id_trasf", idTrasf);
    }

    public String getCdTrasf() {
	return getString("cd_trasf");
    }

    public void setCdTrasf(String cdTrasf) {
	setObject("cd_trasf", cdTrasf);
    }

    public String getCdVersione() {
	return getString("cd_versione");
    }

    public void setCdVersione(String cdVersione) {
	setObject("cd_versione", cdVersione);
    }

    public String getDsVersione() {
	return getString("ds_versione");
    }

    public void setDsVersione(String dsVersione) {
	setObject("ds_versione", dsVersione);
    }

    public Timestamp getDtIstituz() {
	return getTimestamp("dt_istituz");
    }

    public void setDtIstituz(Timestamp dtIstituz) {
	setObject("dt_istituz", dtIstituz);
    }

    public Timestamp getDtSoppres() {
	return getTimestamp("dt_soppres");
    }

    public void setDtSoppres(Timestamp dtSoppres) {
	setObject("dt_soppres", dtSoppres);
    }

    // FIXME: in pratica gestisce i Blob come stringhe, per i blob veri e' da implementare
    public byte[] getBlTrasf() {
	return (byte[]) getObject("bl_trasf");
    }

    public void setBlTrasf(byte[] blTrasf) {
	setObject("bl_trasf", blTrasf);
    }

    @Override
    public void entityToRowBean(Object obj) {
	XfoStoricoTrasf entity = (XfoStoricoTrasf) obj;

	this.setIdStoricoTrasf(new BigDecimal(entity.getIdStoricoTrasf()));

	if (entity.getXfoTrasf() != null) {
	    this.setIdTrasf(new BigDecimal(entity.getXfoTrasf().getIdTrasf()));

	}
	this.setCdTrasf(entity.getCdTrasf());
	this.setCdVersione(entity.getCdVersione());
	this.setDsVersione(entity.getDsVersione());
	if (entity.getDtIstituz() != null) {
	    this.setDtIstituz(new Timestamp(entity.getDtIstituz().getTime()));
	}
	if (entity.getDtSoppres() != null) {
	    this.setDtSoppres(new Timestamp(entity.getDtSoppres().getTime()));
	}
	this.setBlTrasf(entity.getBlTrasf());
    }

    @Override
    public XfoStoricoTrasf rowBeanToEntity() {
	XfoStoricoTrasf entity = new XfoStoricoTrasf();
	if (this.getIdStoricoTrasf() != null) {
	    entity.setIdStoricoTrasf(this.getIdStoricoTrasf().longValue());
	}
	if (this.getIdTrasf() != null) {
	    if (entity.getXfoTrasf() == null) {
		entity.setXfoTrasf(new XfoTrasf());
	    }
	    entity.getXfoTrasf().setIdTrasf(this.getIdTrasf().longValue());
	}
	entity.setCdTrasf(this.getCdTrasf());
	entity.setCdVersione(this.getCdVersione());
	entity.setDsVersione(this.getDsVersione());
	entity.setDtIstituz(this.getDtIstituz());
	entity.setDtSoppres(this.getDtSoppres());
	entity.setBlTrasf(this.getBlTrasf());
	return entity;
    }

    // gestione della paginazione
    public void setRownum(Integer rownum) {
	setObject("rownum", rownum);
    }

    public Integer getRownum() {
	return Integer.parseInt(getObject("rownum").toString());
    }

    public void setRnum(Integer rnum) {
	setObject("rnum", rnum);
    }

    public Integer getRnum() {
	return Integer.parseInt(getObject("rnum").toString());
    }

    public void setNumrecords(Integer numRecords) {
	setObject("numrecords", numRecords);
    }

    public Integer getNumrecords() {
	return Integer.parseInt(getObject("numrecords").toString());
    }

}
